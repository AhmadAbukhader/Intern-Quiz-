Index: prototype/.gitignore
===================================================================
diff --git a/prototype/.gitignore b/prototype/.gitignore
deleted file mode 100644
--- a/prototype/.gitignore	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,29 +0,0 @@
-### IntelliJ IDEA ###
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-
-### Eclipse ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
-
-### Mac OS ###
-.DS_Store
\ No newline at end of file
Index: prototype/.idea/.gitignore
===================================================================
diff --git a/prototype/.idea/.gitignore b/prototype/.idea/.gitignore
deleted file mode 100644
--- a/prototype/.idea/.gitignore	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: prototype/.idea/misc.xml
===================================================================
diff --git a/prototype/.idea/misc.xml b/prototype/.idea/misc.xml
deleted file mode 100644
--- a/prototype/.idea/misc.xml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: prototype/src/PrototypeDemo.java
===================================================================
diff --git a/prototype/src/PrototypeDemo.java b/prototype/src/PrototypeDemo.java
deleted file mode 100644
--- a/prototype/src/PrototypeDemo.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,104 +0,0 @@
-import java.util.Date;
-//lombok
-abstract class Post {
-    private String text ="post caption" ;
-    private String image = "test.png" ;
-    private String author = "test man" ;
-    private Date time = new Date(10) ;
-
-    public String getText() {
-        return text;
-    }
-    public void setText(String text) {
-        this.text = text;
-    }
-    public String getImage() {
-        return image;
-    }
-    public void setImage(String image) {
-        this.image = image;
-    }
-    public String getAuthor() {
-        return author;
-    }
-    public void setAuthor (String author) {
-        this.author = author;
-    }
-    public Date getTime() {
-        return time;
-    }
-    public void setTime (Date time) {
-        this.time = time;
-    }
-
-    public abstract Post postCopy();
-}
-
-class ProfilePost extends Post {
-
-    public ProfilePost (){
-        super();
-    }
-    public ProfilePost (String text , String image , String author , Date time ){
-        this.setText(text);
-        this.setImage(image);
-        this.setAuthor(author);
-        this.setTime(time);
-    }
-
-    @Override
-    public Post postCopy() {
-        ProfilePost clonedPost = new ProfilePost(this.getText(),this.getImage(),this.getAuthor(), this.getTime());
-        return clonedPost;
-    }
-}
-
-class repost extends Post {
-    private String receiver;
-    public repost(String reciver){
-        super();
-        this.receiver = reciver ;
-    }
-    public repost (String reciver, String text , String image , String author , Date time){
-        this.setText(text);
-        this.setImage(image);
-        this.setAuthor(author);
-        this.setTime(time);
-        this.receiver =reciver;
-    }
-    public String getReceiver() {
-        return receiver;
-    }
-    public void setReceiver(String receiver) {
-        this.receiver = receiver;
-    }
-
-    @Override
-    public Post postCopy(){
-        return new repost(this.receiver, this.getText(), this.getImage(), this.getAuthor(), this.getTime() );
-    }
-}
-public class PrototypeDemo {
-    public static void main(String[] args) {
-        ProfilePost test = new ProfilePost();
-        Post testClone = test.postCopy();
-        repost test2 = new repost("recive client","repost message ","postimage.png","test man",new Date() );
-        Post test2clone = test2.postCopy();
-
-        System.out.println(testclone.getAuthor());
-        System.out.println(test2clone.getImage());
-        System.out.println(test2clone.getText());
-    }
-
-}
-
-/*
-Project Idea: Cloning Social Media Posts
-
-Description: Create a system for cloning social media posts. Each post has properties such as text, image, author, and timestamp.
-The prototype pattern can be used to clone posts when users want to share or repost content with slight modifications.
-Features:
-Create a base post with properties.
-Implement a cloning feature to create new posts based on existing ones.
-Allow modification of cloned posts before publishing.
- */
\ No newline at end of file
Index: functional inerface + strategy pattetn/.idea/.gitignore
===================================================================
diff --git a/functional inerface + strategy pattetn/.idea/.gitignore b/functional inerface + strategy pattetn/.idea/.gitignore
deleted file mode 100644
--- a/functional inerface + strategy pattetn/.idea/.gitignore	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: functional inerface + strategy pattetn/.gitignore
===================================================================
diff --git a/functional inerface + strategy pattetn/.gitignore b/functional inerface + strategy pattetn/.gitignore
deleted file mode 100644
--- a/functional inerface + strategy pattetn/.gitignore	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,29 +0,0 @@
-### IntelliJ IDEA ###
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-
-### Eclipse ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
-
-### Mac OS ###
-.DS_Store
\ No newline at end of file
Index: prototype/.idea/modules.xml
===================================================================
diff --git a/prototype/.idea/modules.xml b/prototype/.idea/modules.xml
deleted file mode 100644
--- a/prototype/.idea/modules.xml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/prototype.iml" filepath="$PROJECT_DIR$/prototype.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: prototype/prototype.iml
===================================================================
diff --git a/prototype/prototype.iml b/prototype/prototype.iml
deleted file mode 100644
--- a/prototype/prototype.iml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: functional inerface + strategy pattetn/.idea/misc.xml
===================================================================
diff --git a/functional inerface + strategy pattetn/.idea/misc.xml b/functional inerface + strategy pattetn/.idea/misc.xml
deleted file mode 100644
--- a/functional inerface + strategy pattetn/.idea/misc.xml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: functional inerface + strategy pattetn/.idea/modules.xml
===================================================================
diff --git a/functional inerface + strategy pattetn/.idea/modules.xml b/functional inerface + strategy pattetn/.idea/modules.xml
deleted file mode 100644
--- a/functional inerface + strategy pattetn/.idea/modules.xml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/testtt.iml" filepath="$PROJECT_DIR$/testtt.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: functional inerface + strategy pattetn/src/FunctionalInterfaceExample.java
===================================================================
diff --git a/functional inerface + strategy pattetn/src/FunctionalInterfaceExample.java b/functional inerface + strategy pattetn/src/FunctionalInterfaceExample.java
deleted file mode 100644
--- a/functional inerface + strategy pattetn/src/FunctionalInterfaceExample.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,14 +0,0 @@
-
-
-import java.util.function.UnaryOperator;
-
-public class FunctionalInterfaceExample {
-    public static void main(String[] args) {
-        UnaryOperator<Integer> square = num -> {
-         System.out.println("from the unary operator");
-         return num * num ;
-        };
-        int result = square.apply(5); // 25
-        System.out.println(result);
-    }
-}
Index: functional inerface + strategy pattetn/src/StrategyPatternDemo.java
===================================================================
diff --git a/functional inerface + strategy pattetn/src/StrategyPatternDemo.java b/functional inerface + strategy pattetn/src/StrategyPatternDemo.java
deleted file mode 100644
--- a/functional inerface + strategy pattetn/src/StrategyPatternDemo.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,39 +0,0 @@
-interface Strategy {
-    int doOperation(int num1, int num2);
-}
-
-class OperationAdd implements Strategy {
-    @Override
-    public int doOperation(int num1, int num2) {
-        return num1 + num2;
-    }
-}
-
-class OperationSubtract implements Strategy {
-    @Override
-    public int doOperation(int num1, int num2) {
-        return num1 - num2;
-    }
-}
-
-class Context {
-    private Strategy strategy;
-
-    public Context(Strategy strategy) {
-        this.strategy = strategy;
-    }
-
-    public int executeStrategy(int num1, int num2) {
-        return strategy.doOperation(num1, num2);
-    }
-}
-
-public class StrategyPatternDemo {
-    public static void main(String[] args) {
-        Context context = new Context(new OperationAdd());
-        System.out.println("10 + 5 = " + context.executeStrategy(10, 5));
-
-        context = new Context(new OperationSubtract());
-        System.out.println("10 - 5 = " + context.executeStrategy(10, 5));
-    }
-}
Index: functional inerface + strategy pattetn/testtt.iml
===================================================================
diff --git a/functional inerface + strategy pattetn/testtt.iml b/functional inerface + strategy pattetn/testtt.iml
deleted file mode 100644
--- a/functional inerface + strategy pattetn/testtt.iml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: functional inerface + strategy pattetn/.idea/uiDesigner.xml
===================================================================
diff --git a/functional inerface + strategy pattetn/.idea/uiDesigner.xml b/functional inerface + strategy pattetn/.idea/uiDesigner.xml
deleted file mode 100644
--- a/functional inerface + strategy pattetn/.idea/uiDesigner.xml	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ /dev/null	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: template/src/WorkFlow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>abstract class WorkFlow {\r\n\r\n    abstract void validatingOrder();\r\n    abstract void processingPayment();\r\n    abstract void  preparingDelivery();\r\n    abstract void sendingNotifications();\r\n\r\n\r\n    public final void template() {\r\n        validatingOrder();\r\n        processingPayment();\r\n        preparingDelivery();\r\n        sendingNotifications();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/src/WorkFlow.java b/template/src/WorkFlow.java
--- a/template/src/WorkFlow.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ b/template/src/WorkFlow.java	(date 1722163023524)
@@ -1,3 +1,4 @@
+
 abstract class WorkFlow {
 
     abstract void validatingOrder();
Index: template/src/FoodOrder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class FoodOrder extends WorkFlow{\r\n   private final String name ;\r\n   private String type ;\r\n   private boolean reviewed ;\r\n   private boolean hasCash ;\r\n   private String payMethod ;\r\n\r\n   public FoodOrder(){\r\n       name = \"ahmad\" ;\r\n   }\r\n\r\n   public FoodOrder(String name, String type ,String payMethod , boolean hasCash){\r\n       this.name=name;\r\n       this.type = type;\r\n       this.payMethod=payMethod;\r\n       this.hasCash=hasCash;\r\n   }\r\n\r\n    @Override\r\n    void validatingOrder() {\r\n        System.out.println(name + \" ordered a \" + type );\r\n    }\r\n\r\n    @Override\r\n    void processingPayment() {\r\n      if (hasCash) {\r\n          reviewed= true ;\r\n          System.out.println(name + \" is paying by : \" + payMethod);\r\n      }else {\r\n          reviewed = false ;\r\n      }\r\n    }\r\n    @Override\r\n    void preparingDelivery() {\r\n      if (reviewed) {\r\n       System.out.println(\"the order has been reviewed and will be delivered\");\r\n      }\r\n    }\r\n    @Override\r\n    void sendingNotifications() {\r\n     if (reviewed){\r\n      System.out.println(\"your order is on the way \");\r\n      System.out.println(\"thank you for waiting \");\r\n     }else {\r\n      System.out.println(\"you don`t have enough cash \");\r\n     }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/src/FoodOrder.java b/template/src/FoodOrder.java
--- a/template/src/FoodOrder.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ b/template/src/FoodOrder.java	(date 1722165825481)
@@ -1,31 +1,43 @@
+
 public class FoodOrder extends WorkFlow{
-   private final String name ;
-   private String type ;
+   private  String orderName ;
    private boolean reviewed ;
    private boolean hasCash ;
    private String payMethod ;
+   private int orderPrice ;
+   private Customer customer;
 
    public FoodOrder(){
-       name = "ahmad" ;
+       orderName = "no order";
+       hasCash = false;
+       orderPrice = 0;
+       customer = new Customer();
+       payMethod = "visa";
+
    }
 
-   public FoodOrder(String name, String type ,String payMethod , boolean hasCash){
-       this.name=name;
-       this.type = type;
+   public FoodOrder(String orderName ,String payMethod , int orderPrice , Customer customer){
+       this.orderPrice = orderPrice;
+       this.orderName = orderName ;
        this.payMethod=payMethod;
-       this.hasCash=hasCash;
+       this.customer = customer;
    }
+
 
     @Override
     void validatingOrder() {
-        System.out.println(name + " ordered a " + type );
+        if ((customer.getWallet() - orderPrice) >= 0){
+            hasCash = true ;
+        }
+        System.out.println(customer.getName() + " ordered a " + orderName );
     }
 
     @Override
     void processingPayment() {
       if (hasCash) {
           reviewed= true ;
-          System.out.println(name + " is paying by : " + payMethod);
+          System.out.println(customer.getName() + " is paying by : " + payMethod);
+          customer.setWallet(customer.getWallet() - orderPrice );
       }else {
           reviewed = false ;
       }
Index: Observer pattern/Observer pattern.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/Observer pattern.iml b/Observer pattern/Observer pattern.iml
new file mode 100644
--- /dev/null	(date 1722175297701)
+++ b/Observer pattern/Observer pattern.iml	(date 1722175297701)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Observer pattern/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/.gitignore b/Observer pattern/.gitignore
new file mode 100644
--- /dev/null	(date 1722167414438)
+++ b/Observer pattern/.gitignore	(date 1722167414438)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: Observer pattern/src/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/src/Customer.java b/Observer pattern/src/Customer.java
new file mode 100644
--- /dev/null	(date 1722169742234)
+++ b/Observer pattern/src/Customer.java	(date 1722169742234)
@@ -0,0 +1,17 @@
+
+
+
+class Customer implements Observer {
+    private final String name;
+
+    public Customer(String name ) {
+        this.name = name;
+    }
+
+
+
+    @Override
+    public void update(String message) {
+        System.out.println(name + " received message: " + message);
+    }
+}
Index: Observer pattern/src/StockPrice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/src/StockPrice.java b/Observer pattern/src/StockPrice.java
new file mode 100644
--- /dev/null	(date 1722169572756)
+++ b/Observer pattern/src/StockPrice.java	(date 1722169572756)
@@ -0,0 +1,24 @@
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+class StockPrice {
+    private List<Customer> customers = new ArrayList<>();
+    private String message;
+
+    public void attach(Customer customer) {
+        customers.add(customer);
+    }
+
+    public void notifyAllObservers() {
+        for (Customer customer : customers) {
+            customer.update(message);
+        }
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+        notifyAllObservers();
+    }
+}
Index: template/src/Clothes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Clothes extends WorkFlow{\r\n\r\n    @Override\r\n    void validatingOrder() {\r\n\r\n    }\r\n\r\n    @Override\r\n    void processingPayment() {\r\n\r\n    }\r\n\r\n    @Override\r\n    void preparingDelivery() {\r\n\r\n    }\r\n\r\n    @Override\r\n    void sendingNotifications() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/src/Clothes.java b/template/src/Clothes.java
--- a/template/src/Clothes.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ b/template/src/Clothes.java	(date 1722165825472)
@@ -1,22 +1,59 @@
 public class Clothes extends WorkFlow{
+    private  String orderName ;
+    private boolean reviewed ;
+    private boolean hasCash ;
+    private String payMethod ;
+    private int orderPrice ;
+    private Customer customer;
+
+    public Clothes(){
+        orderName = "no order";
+        hasCash = false;
+        orderPrice = 0;
+        customer = new Customer();
+        payMethod = "visa";
+
+    }
+
+    public Clothes (String orderName ,String payMethod , int orderPrice , Customer customer){
+        this.orderPrice = orderPrice ;
+        this.orderName = orderName ;
+        this.payMethod=payMethod ;
+        this.customer = customer ;
+    }
+
 
     @Override
     void validatingOrder() {
-
+        if ((customer.getWallet() - orderPrice) >= 0){
+            hasCash = true ;
+        }
+        System.out.println(customer.getName() + " ordered a " + orderName );
     }
 
     @Override
     void processingPayment() {
-
+        if (hasCash) {
+            reviewed= true ;
+            System.out.println(customer.getName() + " is paying by : " + payMethod);
+            customer.setWallet(customer.getWallet() - orderPrice );
+        }else {
+            reviewed = false ;
+        }
     }
-
     @Override
     void preparingDelivery() {
-
+        if (reviewed) {
+            System.out.println("the order has been reviewed and will be delivered");
+        }
     }
-
     @Override
     void sendingNotifications() {
-
+        if (reviewed){
+            System.out.println("your order is on the way ");
+            System.out.println("thank you for waiting ");
+        }else {
+            System.out.println("you don`t have enough cash ");
+        }
     }
 }
Index: Observer pattern/src/Observer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/src/Observer.java b/Observer pattern/src/Observer.java
new file mode 100644
--- /dev/null	(date 1722168232404)
+++ b/Observer pattern/src/Observer.java	(date 1722168232404)
@@ -0,0 +1,5 @@
+
+
+interface Observer {
+    void update(String message);
+}
Index: template/src/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/src/Customer.java b/template/src/Customer.java
new file mode 100644
--- /dev/null	(date 1722175510815)
+++ b/template/src/Customer.java	(date 1722175510815)
@@ -0,0 +1,32 @@
+
+
+public class Customer {
+    private String name ;
+    private int wallet ;
+
+
+    public Customer () {
+        // default constructor
+    }
+
+    public Customer (String name , int wallet) {
+        this.name = name ;
+        this.wallet = wallet ;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+//    public void setName(String name) {
+//        this.name = name;
+//    }
+
+    public int getWallet() {
+        return wallet;
+    }
+
+    public void setWallet(int wallet) {
+        this.wallet = wallet;
+    }
+}
Index: Observer pattern/src/observerDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Observer pattern/src/observerDemo.java b/Observer pattern/src/observerDemo.java
new file mode 100644
--- /dev/null	(date 1722168972488)
+++ b/Observer pattern/src/observerDemo.java	(date 1722168972488)
@@ -0,0 +1,45 @@
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class observerDemo {
+    public static void main(String[] args) {
+        Customer ahmad = new Customer("ahmad");
+        Customer samer = new Customer("samer");
+        Customer khalid = new Customer("khalid");
+        Customer sami = new Customer("sami");
+
+        StockPrice gold = new StockPrice();
+        StockPrice teslaStock = new StockPrice();
+
+        gold.attach(ahmad);
+        gold.attach(samer);
+        gold.attach(khalid);
+        gold.attach(sami);
+
+
+
+        teslaStock.attach(ahmad);
+        teslaStock.attach(samer);
+        teslaStock.attach(khalid);
+        teslaStock.attach(sami);
+
+
+
+        teslaStock.setMessage("the tesla stock is going down");
+
+        System.out.println("  ");
+
+        gold.setMessage("gold stock is going up");
+
+
+    }
+}
+
+
+
+//- **Description**: Develop a stock price notifier application where users can subscribe to notifications for specific stock price changes. The observer pattern will help notify all subscribed users when the price of a stock changes.
+//        - **Features**:
+//        - Users can subscribe to notifications for specific stocks.
+//        - Implement the observer pattern to update all subscribers when a stock price changes.
+//    - Allow users to unsubscribe from notifications.
\ No newline at end of file
Index: template/src/TemplatePattern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n\r\n\r\npublic class TemplatePattern extends FoodOrder {\r\n    public static void main(String[] args) {\r\n        FoodOrder burger = new FoodOrder(\"ahmad\",\"fast food\",\"visa\",true);\r\n        burger.template();\r\n        FoodOrder pizza = new FoodOrder(\"ibrahim\",\"pizza\",\"cash\",false);\r\n        pizza.template();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nProject Idea: E-commerce Order Processing and Notification System\r\nDescription: Develop a comprehensive system for an e-commerce platform that processes orders and\r\nsends notifications to users at each step. Each type of order\r\n(e.g., physical goods, digital goods, subscription services)\r\nwill follow a common order processing workflow\r\n (e.g., validating the order, processing the payment, preparing the delivery, sending notifications).\r\n The Template Pattern will define the skeleton of the order processing workflow,\r\n\r\nFeatures:\r\nDefine a common template for the order processing workflow.\r\nImplement specific order processors for different types of orders (e.g., physical goods, digital goods, subscription services).\r\nImplement a notification system that updates users at each step of the order processing workflow\r\n*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/template/src/TemplatePattern.java b/template/src/TemplatePattern.java
--- a/template/src/TemplatePattern.java	(revision 6720d0ac89affc9675e7465dedcded3b084abb7f)
+++ b/template/src/TemplatePattern.java	(date 1722165856728)
@@ -4,28 +4,26 @@
 
 public class TemplatePattern extends FoodOrder {
     public static void main(String[] args) {
-        FoodOrder burger = new FoodOrder("ahmad","fast food","visa",true);
+        Customer customer = new Customer("ahmad" , 200);
+        Clothes jacket = new Clothes("Red Jacket" ,"visa",200 , customer );
+        jacket.template();
+
+        System.out.println("  ");
+
+        FoodOrder burger = new FoodOrder("pizza","visa",100 , customer );
         burger.template();
-        FoodOrder pizza = new FoodOrder("ibrahim","pizza","cash",false);
-        pizza.template();
+
+
     }
 }
 
-
+/*
 
-
-
-/*
 Project Idea: E-commerce Order Processing and Notification System
 Description: Develop a comprehensive system for an e-commerce platform that processes orders and
 sends notifications to users at each step. Each type of order
-(e.g., physical goods, digital goods, subscription services)
 will follow a common order processing workflow
  (e.g., validating the order, processing the payment, preparing the delivery, sending notifications).
  The Template Pattern will define the skeleton of the order processing workflow,
 
-Features:
-Define a common template for the order processing workflow.
-Implement specific order processors for different types of orders (e.g., physical goods, digital goods, subscription services).
-Implement a notification system that updates users at each step of the order processing workflow
 */
